Tuesday 07/19/2022
*Interpreted And Compiled Programming Languages (Explanation):
1. Compiled Languages Compiled languages are converted directly into machine code that the processor can execute. As a result, they tend to be faster and more efficient to execute than interpreted languages. They also give the developer more control over hardware aspects, like memory management and CPU usage.

Compiled languages need a “build” step – they need to be manually compiled first. You need to “rebuild” the program every time you need to make a change. In our hummus example, the entire translation is written before it gets to you. If the original author decides that he wants to use a different kind of olive oil, the entire recipe would need to be translated again and resent to you.

Examples of pure compiled languages are C, C++, Erlang, Haskell, Rust, and Go.

-Interpreted Languages Interpreters run through a program line by line and execute each command. Here, if the author decides he wants to use a different kind of olive oil, he could scratch the old one out and add the new one. Your translator friend can then convey that change to you as it happens.

Interpreted languages were once significantly slower than compiled languages. But, with the development of just-in-time compilation, that gap is shrinking.

Examples of common interpreted languages are PHP, Ruby, Python, and JavaScript.

2. Is Java compiled or interpreted, or both?
concluding that Java uses a combination of both approaches. The source code we write in Java is first compiled into bytecode during the build process. The JVM then interprets the generated bytecode for execution. However, the JVM also makes use of a JIT compiler during runtime to improve performances.

3. Pseudocode Currency Converter exercise
Start program
set the currency to covert USD
Set the currency for the chance BTC
Get the USD amount
Multiply USD * 0.0000423 btc
Get the result.
EG:

Start
USD to BTC
10 * 0.0000423
Result = 0.0000846
End
4. Learn about High and Low level languages
he main difference between high level language and low level language is that, Programmers can easily understand or interpret or compile the high level language in comparison of machine. On the other hand, Machine can easily understand the low level language in comparison of human beings.

Examples of high level languages are C, C++, Java, Python, etc.

Let’s see the difference between high level and low level languages:

High Level Language	Low Level Language
It is programmer friendly language.	It is a machine friendly language.
High level language is less memory efficient.	Low level language is high memory efficient.
It is easy to understand.	It is tough to understand.
It is simple to debug.	It is complex to debug comparatively.
It is simple to maintain.	It is complex to maintain comparatively.
It is portable.	It is non-portable.
It can run on any platform.	It is machine-dependent.
It needs compiler or interpreter for translation.	It needs assembler for translation.
It is used widely for programming.	It is not commonly used now-a-days in programming.
