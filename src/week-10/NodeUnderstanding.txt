1-What is Node.JS?
Node.js is an open-source and cross-platform JavaScript runtime environment. Node.js runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser. This allows Node.js to be very performant. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient and also achieves low latency and high throughput by taking a “non-blocking” approach to serving requests. In other words, Node.js wastes no time or resources on waiting for I/O requests to return.

2-What problem does Node.JS solve?
Node.js has a unique advantage because developers now can write the server side code and the client side with the same JS not as before that needed to do it with a different language.

3-What is the V8 Javascript Engine?
Chrome V8 is a JavaScript engine, which means that it executes JavaScript code. Originally, JavaScript was written to be executed by web browsers. Chrome V8, or just V8, can execute JavaScript code either within or outside of a browser, which makes server-side scripting possible.

4-Is Node.JS really necessary in the Development ecosystem?
It is, since let the developers to run js in Node instead of a browser and also lets control the version we would like to use.

5-What is the difference between Node.JS and any other browser?
The main difference is that we can control the version where to run the app on.

6-What is NVM and Why is it useful for Node.JS developers?
NVM allows you to easily install and manage different versions of Node and switch between them.





Node.js is an open-source and cross-platform JavaScript runtime environment. It is a popular tool for almost any kind of project! Node.js runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser. This allows Node.js to be very performant.

***Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.

Node.js is a JavaScript runtime environment that achieves low latency and high throughput by taking a “non-blocking” approach to serving requests. In other words, Node.js wastes no time or resources on waiting for I/O requests to return.

Node.js has a unique advantage because developers now can write the server side code and the client side with the same JS not as before that needed to do it with a different language.

In Node.js the new ECMAScript standards can be used without problems, as you don't have to wait for all your users to update their browsers - you are in charge of deciding which ECMAScript version to use by changing the Node.js version, and you can also enable specific experimental features by running Node.js with flags.

Node.js has a Vast Number of Libraries. npm with its simple structure helped the ecosystem of Node.js proliferate, and now the npm registry hosts over 1,000,000 open source packages you can freely use.

Node.js Frameworks and Tools. Node.js is a low-level platform. In order to make things easy and exciting for developers, thousands of libraries were built upon Node.js by the community.

**A Brief History Of Node.Js

Node.js is only 13 years old, 

Differences Between Node.Js And The Browser**
-Both the browser and Node.js use JavaScript as their programming language.
-In the browser, most of the time what you are doing is interacting with the DOM, or other Web Platform APIs like Cookies and those don't exist in Node.
-And in the browser, we don't have all the nice APIs that Node.js provides through its modules, like the filesystem access functionality.
-Another big difference is that in Node.js you control the environment. Unless you are building an open source application
-we can use require() and import in Node.js, while you are limited to import in the browser.

Node.Js, The Difference Between Development And Production**
-Node.js assumes it's always running in a development environment. You can signal Node.js that you are running in production by setting the NODE_ENV=production environment variable.

-We have to use export NODE_ENV=production// it's better to put it in your shell configuration file (e.g. .bash_profile with the Bash shell) because otherwise the setting does not persist in case of a system restart.

ECMAScript 2015 (ES6) And Beyond**
All ECMAScript 2015 (ES6) features are split into three groups for shipping, staged, and in progress features:

-All shipping features, which V8 considers stable, are turned on by default on Node.js and do NOT require any kind of runtime flag.

-Staged features, which are almost-completed features that are not considered stable by the V8 team, require a runtime flag: --harmony.

-In progress features can be activated individually by their respective harmony flag, although this is highly discouraged unless for testing purposes. Note: these flags are exposed by V8 and will potentially change without any deprecation notice.

** npm  **
These are libraries built by the awesome community which will solve most of your generic problems. npm (Node package manager) has packages you can use in your apps to make your development faster and efficient.

Require****
Require does three things:

It loads modules that come bundled with Node.js like file system and HTTP from the Node.js API .
It loads third-party libraries like Express and Mongoose that you install from npm.
It lets you require your own files and modularize the project.
Require is a function, and it accepts a parameter “path” and returns module.exports.

Basic Node.js architecture****
At a high level, Node.js combines the Google V8 JavaScript engine, a single-threaded non-blocking event loop, and a low-level I/O API.

-The Node.js package ecosystem***
The NPM registry hosts more than 1.2 million packages of free, reusable Node.js code, which makes it the largest software registry in the world. 
-NPM can manage packages that are local dependencies of a particular project, as well as globally installed JavaScript tools. 

What is Chrome V8?***
Chrome V8 is a JavaScript engine, which means that it executes JavaScript code. Originally, JavaScript was written to be executed by web browsers. Chrome V8, or just V8, can execute JavaScript code either within or outside of a browser, which makes server-side scripting possible.

-V8 translates JavaScript code directly into machine code* so that computers can actually understand it, then it executes the translated, or compiled, code. V8 optimizes JavaScript execution as well.

What is sandboxing?**
-A 'sandbox' is an environment for executing software that is isolated and partitioned off from other environments, even those on the same machine.

Sandboxing is a key feature of Chrome V8. Each process is sandboxed, which ensures that JavaScript functions run separately on it and the execution of one piece of code does not affect any other piece of code. (Unlike many sandboxing enterprise products, which open and run executable files within isolated virtual machines, V8 sandboxing does not slow performance.)